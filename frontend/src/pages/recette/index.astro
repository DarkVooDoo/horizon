---
import Layout from "@layouts/Layout.astro"
import Modal from "@components/Modal.astro"

const host = import.meta.env.DEV ? import.meta.env.DEV_HOST : import.meta.env.PRODUCTION_HOST_HOST

const fetchRecettes = await fetch(`http://${host}:5000/api/recipe`)
const data = await fetchRecettes.json() as {recipe: {id: string, name: string, items: number}[], produit: {id: string, name: string, packaging: number, price: number}[]}
---
<Layout title="Recettes">
    <main>
        <div class="recipe_top">
            <h1>Recettes</h1>
            <button type="button" class="recipe_top_addBtn">Nouvelle Recette</button>
        </div>
        <div class="recipes">
            {["Recette", "Ingredients"].map(item=>(
                <div class="recipes_header">{item}</div>
            ))}
        </div>
        {data.recipe.map(item=>(
            <a href={`/recette/${item.id}`} class="recipes_content">
                <div class="recipes_content_box">{item.name} 
                    <button class="recipes_actions">
                        <div class="dot"/>
                        <div class="dot"/>
                        <div class="dot"/> 
                        <div class="recipes_actions_option" data-id={item.id}>
                            <p >Modifier</p>
                            <p id="delete">Supprimer</p>
                        </div>  
                    </button> 
                </div>
                <p class="recipes_content_box">{item.items}</p>    
            </a>
        ))}
        <Modal>
            <div class="modal">
                <h3 class="modal_header">Nouvelle Recette</h3>
                <div class="modal_form">
                    <div class="modal_recipe_dfield_field">
                        <input type="text" name="name" id="name" autocomplete="off" placeholder="Nom de la recette" class="modal_recipe_input input_name">
                    </div>
                    <div class="modal_recipe_dfield_field">
                        <input type="number" name="variant" id="variant" autocomplete="off" placeholder="Variante" class="modal_recipe_input">
                    </div>
                    <div class="modal_recipe_dfield_field" id="ingredients">
                        <p id="ingredients_display">{data.produit[0].name} </p>
                        <div id="ingredients_options" class="hidden">
                            {data.produit.map(item=>(
                                <div  data-id={item.id} class="option">{item.name} </div>
                            ))}
                        </div>
                    </div>
                    <div class="modal_recipe_dfield_field">
                        <input type="number" name="quantity" id="quantity" required autocomplete="off" class="modal_recipe_input">
                        <label for="quantity" class="modal_recipe_label">Quantit√©</label>
                    </div>                        
                </div>
                <button class="add_recipe_btn">Creer</button>
            </div>
        </Modal>
    </main>
</Layout>

<script>
    const ingredients: {id: string | undefined, name: string | null, quantity: number}[] = []
    const addRecipeBtn = document.querySelector(".add_recipe_btn") as HTMLButtonElement
    const modal = document.querySelector(".m-wrapper") as HTMLDivElement
    const ingredientsParent = document.querySelector(".modal_form") as HTMLDivElement
    const nameInput = document.querySelector("#name") as HTMLInputElement
    const variantInput = document.querySelector("#variant") as HTMLInputElement
    const ingredientInput = document.querySelector("#ingredients") as HTMLSelectElement
    const quantityInput = document.querySelector("#quantity") as HTMLInputElement
    const displayProduit = document.querySelector("#ingredients_display") as HTMLParagraphElement
    const optionsParent = document.querySelector("#ingredients_options") as HTMLDivElement
    const options = document.querySelectorAll(".option") as NodeListOf<HTMLDivElement>
    const openNewRecipeModal = document.querySelector(".recipe_top_addBtn") as HTMLButtonElement
    const openActions = document.querySelectorAll(".recipes_actions") as NodeListOf<HTMLButtonElement>
    const deleteRecipeBtn = document.querySelectorAll(".delete") as NodeListOf<HTMLParagraphElement>
    let currentIngredientId:string | undefined = options[0].dataset.id
            
    openNewRecipeModal.addEventListener("click", (e)=>{
        modal.classList.toggle("open")
    })
    displayProduit.addEventListener("click", (e)=>{
        e.stopPropagation()
        optionsParent.classList.toggle("hidden")
    })

    options.forEach(item=>{
        item.addEventListener("click", (e)=>{
            displayProduit.textContent = item.textContent
            currentIngredientId = item.dataset.id
            optionsParent.classList.toggle("hidden")
        })
    })
    quantityInput.addEventListener("keypress", (e)=>{
        if (e.key === "Enter"){
            ingredients.push({id: currentIngredientId, name: displayProduit.textContent, quantity: parseInt(quantityInput.value)})
            const newIngredient = document.createElement("p")
            const quantity = document.createElement("p")
            newIngredient.innerHTML = displayProduit.textContent || ""
            quantity.innerHTML = quantityInput.value
            ingredientsParent.append(newIngredient)
            ingredientsParent.append(quantity)
            quantityInput.value = ""
            ingredientInput.focus()
        }
    })
    openActions.forEach(item=>{
        item.addEventListener("click", async()=>{
           //Open The Actions
        })
    })
    deleteRecipeBtn.forEach(item=>{
        item.addEventListener("click", async(e)=>{
            e.stopPropagation()
            const id = item.parentElement?.dataset.id
            const deleteRecipe = await fetch("http://localhost:5000/api/recipe",{
                method: "DELETE",
                headers: [["Content-Type", "application/json"]],
                body: JSON.stringify({id})
            })
            if(deleteRecipe.status === 200) window.location.reload()
        })
    })
    addRecipeBtn.addEventListener("click", async ()=>{
        const addRecipe = await fetch("http://localhost:5000/api/recipe",{
            method: "POST",
            headers: [["Content-Type", "application/json"]],
            body: JSON.stringify({name: nameInput.value, variant: parseInt(variantInput.value), ingredients})
        })
        if(addRecipe.status === 200)window.location.reload()
    })
</script>

<style>
    .recipes_actions{
        position: relative;
        height: 2rem;
        width: 2rem;
        display: flex;
        justify-content: center;
        gap: 3px;
        align-items: center;
        border-radius: 50%;
        background-color: lightgray;
        z-index: 1;
    }
    .dot{
        height: 5px;
        width: 5px;
        border-radius: 50%;
        background-color: black;
    }
    .recipes_actions_option{
        position: absolute;
        left: 2.2rem;
        top: 0;
        width: 5rem;
        background-color: darkgray;
        z-index: 2;
    }
    .recipe_top{
        display: flex;
        justify-content: space-between;
        align-items: center;
    }
    .recipe_top_addBtn, .add_recipe_btn{
        height: 2rem;
        padding: 0 .5rem;
        background-color: var(--Primary_Color);
        border-radius: 5px;
        font-weight: bold;
    }
    .recipes, .recipes_content{
        display: grid;
        grid-template-columns: 2fr 1fr;
        align-items: center;
    }
    .recipes_content{
        border-bottom: 1px solid black;
        height: 3.5rem;
    }
    .recipes_header{
        height: 2rem;
        display: flex;
        align-items: center;
        background-color: var(--Primary_Color);
        font-weight: bold;
    }
    .recipes_header, .recipes_content_box{
        display: flex;
        align-items: center;
        gap: .3rem;
        padding: 0 .5rem;
    }
    .modal{
        width: 85vw;
        background-color: white;
        border-radius: 5px;
        padding: .5rem;
    }
    .modal > *{
        margin-bottom: var(--Element_Bottom_Margin);
    }
    .modal input{
        padding: 0 .5rem;
    }
    .modal_header, .modal_recipe_dfield{
        margin-bottom: var(--Element_Bottom_Margin);
    }
    .modal_header{
        text-align: center;
    }
    .modal_form{
        display: grid;
        gap: .5rem;
        grid-template-columns: 2fr 1fr;
    }
    .modal_recipe_dfield_field{
        position: relative;
        height: 3rem;
    }

    .modal_recipe_label{
        position: absolute;
        left: .5rem;
        font-size: .8rem;
        top: calc((3rem - .8rem) / 2);
        transition: top .5s linear;
    }
    .modal_recipe_input{
        height: 100%;
        width: 100%;
        font-size: 1rem;
        border: 1px solid black;
    }
    .modal_recipe_input:focus + .modal_recipe_label, .modal_recipe_input:valid + .modal_recipe_label{
        top: 2px;
        font-size: .6rem;
    }
    #ingredients{
        position: relative;
        border: 1px solid black;
    }
    #ingredients_display{
        padding: 0 .5rem;
        height: 100%;
        width: 100%;
        display: flex;
        align-items: center;
    }
    #ingredients_options{
        padding: 0 .5rem;
        position: absolute;
        top: 3.1rem;
        width: 100%;
        background-color: burlywood;
    }
    .option{
        height: 2rem;
        display: flex;
        align-items: center;
    }
    .hidden{
        display: none;
    }
</style>