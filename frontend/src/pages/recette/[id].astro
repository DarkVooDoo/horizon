---
import Layout from "@layouts/Layout.astro"
const {id} = Astro.params
import Recipe from "/recipe.svg"
const host = import.meta.env.MODE === "production" ? import.meta.env.PRODUCTION_HOST_HOST : import.meta.env.DEV_HOST
const recipe = await fetch(`http://${host}:5000/api/recipe?rId=${id}`)
const data = await recipe.json() as {id: string, name: string, price: number, ingredients: {id: string, name: string, quantity: number, price: number}[]}
const t = await fetch("https://jsonplaceholder.typicode.com/todos/1")
const pls = await t.json()
---
<Layout title={`${data.name}`}>
    <main>
        <div class="recipe_top">
            <img src={Recipe} alt="recipe" class="recipe_logo" />
            <div class="recipe_top_content">
                <h1 class="recipe_name">{data.name} </h1>
                <div class="recipe_top_content_action" data-id={data.id}>
                    <button class="recipe_top_content_btn" id="editBtn">Modifier</button>
                    <button class="recipe_top_content_btn" id="deleteBtn">Supprimer</button>
                </div>
            </div>

        </div>
        <div class="recipe_header">
            <h3></h3>
            <h3>Produit</h3>
            <h3>Quantité</h3>
        </div>
        {data.ingredients.map(ingredient=>(
            <div class="recipe_ingredient">
                <h3 class="recipe_ingredient_text">{ingredient.name}</h3>
                <h3 class="recipe_ingredient_text">{ingredient.quantity} </h3>
            </div>
            <div class="recipe_ingredient hidden">
                <input type="text" class="recipe_ingredient_text ingredient_input" value={ingredient.name} />
                <input type="number" class="recipe_ingredient_text ingredient_input" value={ingredient.quantity} />
            </div>
        ))}
        <details class="recipe_summary">
            <summary>Prix de la recette</summary>
            {data.ingredients.map(item=>(
                <div class="recipe_prices">
                    <p class="recipe_prices_text">{item.name} </p>
                    <p class="recipe_prices_text">{item.quantity}</p>
                    <p class="recipe_prices_text">{item.price}£ </p>
                </div>
            ))}
            <div class="recipe_summary_total">
                <h3 class="recipe_summary_total_label">Total</h3>
                <h3 class="recipe_summary_total_price">{data.price}£ </h3>
            </div>
        </details>
        <button class="downloadBtn" data-id={data.id}>Telecharger</button>
    </main>
</Layout>

<script>
    const editBtn = document.querySelector("#editBtn") as HTMLButtonElement
    const ingredients = document.querySelectorAll(".recipe_ingredient") as NodeListOf<HTMLInputElement>
    const inputs = document.querySelectorAll(".ingredient_input") as NodeListOf<HTMLInputElement>

    editBtn.onclick = ()=>{
        editBtn.classList.toggle("activeButton")
        ingredients.forEach(ingredientElement=>{
            ingredientElement.classList.toggle("hidden")
        })
        if(editBtn.classList.contains("activeButton")){
            inputs[0].focus()
        }
    }
    const deleteRecipeBtn = document.querySelector("#deleteBtn") as HTMLButtonElement
    deleteRecipeBtn.addEventListener("click", async(e)=>{
        e.stopPropagation()
        const id = deleteRecipeBtn.parentElement?.dataset.id
        const deleteRecipe = await fetch("http://localhost:5000/api/recipe",{
            method: "DELETE",
            headers: [["Content-Type", "application/json"]],
            body: JSON.stringify({id})
        })
        if(deleteRecipe.status === 200) window.location.href = "/"
    })
    const downloadBtn = document.querySelector(".downloadBtn") as HTMLButtonElement
    downloadBtn.addEventListener("click", async()=>{
        const download = await fetch(`http://localhost:5000/api/recipe`,{
            headers: [["x-pdf", downloadBtn.dataset.id || ""]]
        })
        const blob = await download.blob()
        const save = document.createElement("a")
        save.href = URL.createObjectURL(blob)
        save.download = "recette.pdf"
        save.click()
        URL.revokeObjectURL(save.href)
    })
</script>

<style>
    main{
        counter-increment: count 0;
    }
    main > *{
        margin-bottom: var(--Element_Bottom_Margin);
    }
    .recipe_top{
        display: grid;
        grid-template-columns: 1fr 3fr;
        margin-top: var(--Element_Bottom_Margin);
    }
    .recipe_logo{
        width: 7rem;
        height: 7rem;
    }
    .recipe_top_content{
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
    }
    .recipe_name{
        font-weight: bold;
        font-size: 1.3rem;
        text-align: center;
        margin-bottom: var(--Element_Bottom_Margin);
    }
    .recipe_top_content_btn{
        height: 2rem;
        width: 7rem;
        border-radius: 25px;
        background-color: lightgray;
    }
    .recipe_header, .recipe_ingredient{
        display: grid;
        grid-template-columns: .3fr 2fr 1fr;
        gap: .3rem;
        align-items: center;
    }
    .recipe_ingredient{
        height: 3rem;
        padding: 5px;
        border-bottom: 1px solid var(--Primary_Color);
        margin: 0;
    }
    .recipe_ingredient::before{
        counter-increment: count;
        content: counter(count)" -";
    }
    .recipe_ingredient_text{
        font-weight: 400;
        font-size: .9rem;
        height: 100%;
        width: 100%;
        display: flex;
        align-items: center;
        border: none;
    }
    .ingredient_input{
        background-color: transparent;
    }
    .recipe_prices{
        display: grid;
        grid-template-columns: 2fr 1fr 1fr;
    }
    .recipe_summary{
        margin-top: var(--Element_Bottom_Margin);
        background-color: lightgray;
        padding: .5rem;
    }
    .recipe_prices_text{
        height: 2rem;
        display: flex;
        align-items: center;
        border-bottom: 1px solid black;
    }
    .recipe_summary_total{
        margin-top: var(--Element_Bottom_Margin);
        display: grid;
        grid-template-columns: 2fr 1fr 1fr;
        grid-template-areas: ". label total";
    }
    .recipe_summary_total_label{
        grid-area: label;
    }
    .recipe_summary_total_price{
        grid-area: total;
    }
    .activeButton{
        background-color: var(--Primary_Color);
    }
</style>